dans cette code j'aimerai ajouter un input qui permet de changer les longitude et altitude dans la carte et aussi ajoute aussi un systeme de marker lorsque les utilisateurs clique sur un site par exemple ici on est dans le pays israel et j'aimerai qu'on affiche comme marker tous les endroits ou jesus chris Ã  voyager durant son evangelisation et mettre les localisation de ces dernier dans un variable en dehors du composant react dans le code suivant: "use client";
import { MAPBOX_TOKEN, darkStyle, lightStyle, summerDark, summerLight } from "@/tool/security";
import React, { useState, useEffect, useRef } from "react";
import mapboxgl from 'mapbox-gl';

mapboxgl.accessToken = MAPBOX_TOKEN;

export default function Home() {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const [lng, setLng] = useState(35.21633);
  const [lat, setLat] = useState(31.76904);
  const [zoom, setZoom] = useState(9);
  const [mapStyle, setMapStyle] = useState(darkStyle);
  const [season, setSeason] = useState('spring');
  const [showBuilding, setShowBuilding] = useState(true);
  const [showRoad, setShowRoad] = useState(true);
  const [mountainHeight, setMountainHeight] = useState(100); // Default mountain height

  useEffect(() => {
    if (map.current) return;
    map.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: darkStyle, // Default style
      center: [lng, lat],
      zoom: zoom,
      pitch: 62,
      bearing: -20,
    });

    map.current.on('move', () => {
      setLng(map.current.getCenter().lng.toFixed(4));
      setLat(map.current.getCenter().lat.toFixed(4));
      setZoom(map.current.getZoom().toFixed(2));
    });

    map.current.on('style.load', () => {
      map.current.addSource('mapbox-dem', {
        type: 'raster-dem',
        url: 'mapbox://mapbox.terrain-rgb'
      });

      map.current.setTerrain({ source: 'mapbox-dem', exaggeration: mountainHeight / 100 });
    });

  }, [map]);

  useEffect(() => {
    if (map) {
      const styles = {
        spring: lightStyle,
        summer: summerLight,
        autumn: summerDark,
        winter: darkStyle,
      };
      setMapStyle(styles[season]);
      map.current.setStyle(mapStyle);
    }
  }, [season, mapStyle]);

  const handleCheckboxChange = (layerId, property, value) => {
    if (map) {
      map.current.setLayoutProperty(layerId, property, value ? 'visible' : 'none');
    }
  };

  const handleMountainHeightChange = (event) => {
    const height = event.target.value;
    setMountainHeight(height);
    if (map.current.getTerrain()) {
      map.current.setTerrain({ source: 'mapbox-dem', exaggeration: height / 100 });
    }
  };

  return (
    <main className="m-2">
      <div id="map" ref={mapContainer} style={{ position: 'absolute', top: 0, bottom: 0, width: '100%' }}></div>
      <div className="map-overlay top w-[20vw]">
        <div className="map-overlay-inner">
          <fieldset className="select-fieldset">
            <label>Select season</label>
            <select value={season} onChange={(e) => setSeason(e.target.value)}>
              <option value="spring">Spring</option>
              <option value="summer">Summer</option>
              <option value="autumn">Autumn</option>
              <option value="winter">Winter</option>
            </select>
          </fieldset>
          <fieldset>
            <label>Show Building</label>
            <input
              type="checkbox"
              checked={showBuilding}
              onChange={(e) => {
                setShowBuilding(e.target.checked);
                handleCheckboxChange('building-extrusion', 'visibility', e.target.checked);
              }}
            />
          </fieldset>
          <fieldset>
            <label>Show Road</label>
            <input
              type="checkbox"
              checked={showRoad}
              onChange={(e) => {
                setShowRoad(e.target.checked);
                handleCheckboxChange('road-simple', 'visibility', e.target.checked);
                handleCheckboxChange('bridge-simple', 'visibility', e.target.checked);
                handleCheckboxChange('bridge-case-simple', 'visibility', e.target.checked);
                handleCheckboxChange('tunnel-simple', 'visibility', e.target.checked);
              }}
            />
          </fieldset>
          <fieldset>
            <label>Mountain Height: {mountainHeight}%</label>
            <input
              type="range"
              min="0"
              max="300"
              value={mountainHeight}
              onChange={handleMountainHeightChange}
            />
          </fieldset>
        </div>
      </div>
    </main>
  );
}